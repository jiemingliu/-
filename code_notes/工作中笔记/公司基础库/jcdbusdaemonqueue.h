/******************************************************************************
* 文件名: jcdbusdaemonqueue.h
* 描述:通信模块消息队列管理
* Copyright(c)2014-2016 JCDZ Co.,Ltd.
*
* 修改记录:
* --------------------
* v1.0   2014/04/02 16:22:46, lys 创建文件
*
******************************************************************************/
#ifndef _JCDBUSDAEMONQUEUE_H_
#define _JCDBUSDAEMONQUEUE_H_

#include "jcbase.h"
#include "jcLock.hpp"
#include "jcdebug.h"

#define QUEUE_COUNT  64 /*消息队列数目,暂定64个*/

class JCDbusQueue;
class JCDbusMsgInfo;
class JCDbusMsg;
/******************************************************************************
* 函数名:JCDbusDaemonQueue
* 描述: 用于JC-DBUS通信后台管理通信子模块消息队列
*
* 输入:
* 输出:
* 返回值:
*
* 修改记录:
* --------------------
*    2014/04/03 10:21:9, lys 创建函数
*
******************************************************************************/
class DLL_EXPORT JCDbusDaemonQueue
{
public:
	JCDbusDaemonQueue();
	virtual ~JCDbusDaemonQueue();

    /******************************************************************************
    * 函数名:JCDbusDaemonQueue.InsertQueue
    * 描述: 添加新消息队列,与nID有对应关系(ID范围[0, QUEUE_COUNT-1]),默认队列容量为512
    *
    * 输入:
    * 输出:
    * 返回值:ID越限或对应ID队列已存在时失败
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:22:14, lys 创建函数
    *
    ******************************************************************************/
	bool InsertQueue(unsigned int nId);

    /******************************************************************************
    * 函数名:JCDbusDaemonQueue.RemoveQueue
    * 描述: 移除已创建的消息队列
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录: 若ID越限时失败
    * --------------------
    *    2014/04/03 10:24:56, lys 创建函数
    *
    ******************************************************************************/
	bool RemoveQueue(unsigned int nId);

    /******************************************************************************
    * 函数名:JCDbusDaemonQueue.QueueExist
    * 描述: ID对应的队列是否已存在
    *
    * 输入:
    * 输出:
    * 返回值: 若ID越限时返回false,认为不存在
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:26:8, lys 创建函数
    *
    ******************************************************************************/
	bool QueueExist(unsigned int nId);

    /******************************************************************************
    * 函数名:JCDbusDaemonQueue.QueueIsFull
    * 描述: ID对应的队列是否消息已满
    *
    * 输入:
    * 输出:
    * 返回值: 若ID越限视为false
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:27:40, lys 创建函数
    *
    ******************************************************************************/
	bool QueueIsFull(unsigned int nId);

    /******************************************************************************
    * 函数名:JCDbusDaemonQueue.QueueIsEmpty
    * 描述: ID对应消息队列是否为空
    *
    * 输入:
    * 输出:
    * 返回值:若ID越限视为true,即认为队列也是空的
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:28:30, lys 创建函数
    *
    ******************************************************************************/
	bool QueueIsEmpty(unsigned int nId);

    /******************************************************************************
    * 函数名:JCDbusDaemonQueue.PushFront
    * 描述: 在ID对应消息队列头部插入消息
    *
    * 输入:
    * 输出:
    * 返回值: 若ID越限也返回false
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:29:24, lys 创建函数
    *
    ******************************************************************************/
	bool PushFront(unsigned int nId, const JCDbusMsg& tMsg);

    /******************************************************************************
    * 函数名:JCDbusDaemonQueue.PushBack
    * 描述: 在ID对应消息队列尾部插入消息
    *
    * 输入:
    * 输出:
    * 返回值:若ID越限也返回false
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:30:8, lys 创建函数
    *
    ******************************************************************************/
	bool PushBack(unsigned int nId, const JCDbusMsg& tMsg);

    /******************************************************************************
    * 函数名:JCDbusDaemonQueue.PopFront
    * 描述: 取出ID对应消息队列头部消息
    *
    * 输入:
    * 输出:
    * 返回值:若ID越限也返回false
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:30:42, lys 创建函数
    *
    ******************************************************************************/
	bool PopFront(unsigned int nId, JCDbusMsg& tMsg);

    /******************************************************************************
    * 函数名:JCDbusDaemonQueue.PopBack
    * 描述: 取出ID对应消息队列尾部消息
    *
    * 输入:
    * 输出:
    * 返回值:若ID越限也返回false
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:31:25, lys 创建函数
    *
    ******************************************************************************/
	bool PopBack(unsigned int nId, JCDbusMsg& tMsg);

    /******************************************************************************
    * 函数名:JCDbusDaemonQueue.PopSpecMsg
    * 描述: 以阻塞方式获取指定消息(阻塞最大时长默认3000ms)
    *
    * 输入:
    * 输出:
    * 返回值:若ID越限也返回false
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:32:3, lys 创建函数
    *
    ******************************************************************************/
	bool PopSpecMsg(unsigned int nId, const JCDbusMsgInfo &tInfo, JCDbusMsg& tMsg, unsigned int nTimeOut = 3000);

	/******************************************************************************
    * 函数名:JCDbusDaemonQueue.PopSpecClientMsg
    * 描述: 以阻塞方式获取指定Client的指定消息(阻塞最大时长默认3000ms)
    *
    * 输入:
    * 输出:
    * 返回值:若ID越限也返回false
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:32:3, lys 创建函数
    *
    ******************************************************************************/
	bool PopSpecClientMsg(unsigned int nId, const JCDbusMsgInfo &tInfo, JCDbusMsg& tMsg, unsigned int nTimeOut = 3000);

    /******************************************************************************
    * 函数名:JCDbusDaemonQueue.QueueMessageCount
    * 描述: 获取ID对应消息队列当前消息数目
    *
    * 输入:
    * 输出:
    * 返回值:若ID越限,消息数目视为0
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:34:27, lys 创建函数
    *
    ******************************************************************************/
	unsigned int QueueMessageCount(unsigned int nId);

    /******************************************************************************
    * 函数名:JCDbusDaemonQueue.SetQueueSize
    * 描述: 设置ID对应队列容量
    *
    * 输入:
    * 输出:
    * 返回值:ID越限时返回false
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:47:45, lys 创建函数
    *
    ******************************************************************************/
	bool SetQueueSize(unsigned int nId, unsigned int nSize);

    /******************************************************************************
    * 函数名:JCDbusDaemonQueue.QueueCount
    * 描述: 获取当前已创建的队列数目
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:59:27, lys 创建函数
    *
    ******************************************************************************/
	unsigned int QueueCount();

	/******************************************************************************
    * 函数名:JCDbusDaemonQueue.ClearQueueSpecMsg
    * 描述: 削除指定队列指定ID消息
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:59:27, lys 创建函数
    *
    ******************************************************************************/
	int ClearQueueSpecMsg(unsigned int nId, const JCDbusMsgInfo &tInfo);

private:
	JCCriticalSection m_tCs;
	JCDbusQueue *m_tQueue[QUEUE_COUNT];
};

#endif /* _JCDBUSDAEMONQUEUE_H_ */

