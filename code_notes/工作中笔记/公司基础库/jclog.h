/******************************************************************************
* 文件名: jclog.h
* 描述: LOG包装,添加格式化、级别和模块控制以及多线程安全
* Copyright(c)2014-2016 JCDZ Co.,Ltd.
*
* 修改记录:
* --------------------
* v1.0   2014/03/28 10:5:16, lys 创建文件
*
******************************************************************************/
#ifndef _JCLOG_H_
#define _JCLOG_H_

#include <string>

#include "jcbase.h"
#include "jcmacrotools.h"
#include "jcfilelog.h"
#include "jcdynamiclog.h"
#include "jcLock.hpp"

using namespace std;

enum LogMode
{
	TONULL =      0,
	TOFILE =      BIT0,
	TODEBUGVIEW = BIT1,
	TOCONSOLE   = BIT2,
	TOTELNET	= BIT3,
	TOALL =       BIT0|BIT1|BIT2|BIT3
};

enum LogLevel
{
	LOG_NULL =  0,
	LOG_INFO =  BIT0,
	LOG_CYCLE=	BIT1,
	LOG_WARN =  BIT2,
	LOG_ERROR = BIT3,
	LOG_FATAL = BIT4,
	LOG_ASNMSG = BIT5,
	LOG_ALL =   BIT0|BIT1|BIT2|BIT3|BIT4|BIT5
};

#define ALL_MODULE 0xFFFFFFFFFFFFFFFF

#define LOG_TO_PRINT BIT0|BIT2|BIT3|BIT4

class JCNetworkManager;

class DLL_EXPORT JCLogWrapper
{
public:
    /******************************************************************************
    * 函数名:JCLogWrapper.JCLogWrapper
    * 描述: 构造日志对象(默认开启file(文件名有效时)/debugview两种方式输出所有等级、所有模块
    *       日志信息 ), 默认输出除LOG_CYCLE外的所有等级
    * 输入: strFileName 输出日志文件名,为空时不创建日志文件且默认关闭文件输出使能
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/28 22:58:19, lys 创建函数
    *
    ******************************************************************************/
	JCLogWrapper(const string &strFileName = "");
	virtual ~JCLogWrapper();

    /******************************************************************************
    * 函数名:JCLogWrapper.Log
    * 描述: 输出日志
    *
    * 输入: nModuleId模块ID  nLevel日志等级  strFmt日志内容, 当格式字符串使用%s时, 必须使用
	*       const char* 的字符串入参与之对应,否则可能引起异常
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/28 23:0:19, lys 创建函数
    *
    ******************************************************************************/
	void Log(unsigned int nModuleId, unsigned int nLevel, string strFmt, ...);

	/******************************************************************************
    * 函数名:JCLogWrapper.PufiyFileLog
    * 描述: 只输出传入的日志数据，不增加时间，级别等附加信息
    *
    * 输入: 日志数据
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2017/07/31 11:31:19, gaopeng 创建函数
    *
    ******************************************************************************/
	void PureFileLog(string strLog);

    /******************************************************************************
    * 函数名:JCLogWrapper.SetLevelMask
    * 描述: 设置日志打印等级控制开关
    *
    * 输入: nLevel & nMask 为假则该条日志过滤
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/28 23:1:55, lys 创建函数
    *
    ******************************************************************************/
	void SetLevelMask(unsigned char nMask);

    /******************************************************************************
    * 函数名:JCLogWrapper.SetModuleMask
    * 描述: 设置日志打印模块控制开关
    *
    * 输入: nModuleId & nMask 为假则该条日志过滤
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/28 23:4:4, lys 创建函数
    *
    ******************************************************************************/
	void SetModuleMask(__int64 nMask);

    /******************************************************************************
    * 函数名:JCLogWrapper.SetLogMode
    * 描述: 设置日志输出方式 (nMode Bit位为1,则表示该位对应输出方式使能
	*       BIT0 -- file BIT1 -- debug view BIT2 -- console BIT3 -- telnet)
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/28 23:10:4, lys 创建函数
    *
    ******************************************************************************/
	void SetLogMode(unsigned int nMode);

    /******************************************************************************
    * 函数名:JCLogWrapper.TraceOn
    * 描述: 使能日志输出(总开关)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/24 10:30:27, lys 创建函数
    *
    ******************************************************************************/
	void TraceOn();

    /******************************************************************************
    * 函数名:JCLogWrapper.TraceOff
    * 描述: 关闭日志输出(总开关)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/24 10:31:13, lys 创建函数
    *
    ******************************************************************************/
	void TraceOff();

    /******************************************************************************
    * 函数名:JCLogWrapper.SetFileLogSize
    * 描述: 设置日志文件大小(单位: 字节, 默认大小为10M)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/28 23:11:32, lys 创建函数
    *
    ******************************************************************************/
	void SetFileLogSize(unsigned int nByteSize);

    /******************************************************************************
    * 函数名:JCLogWrapper.UpdateFileLogName
    * 描述: 更新日志文件名,可用于创建新的日志文件
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/28 23:12:59, lys 创建函数
    *
    ******************************************************************************/
	void UpdateFileLogName(const string &strFileName);

    /******************************************************************************
    * 函数名:JCLogWrapper.FileLogName
    * 描述: 当前使用的日志文件名
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/28 23:13:41, lys 创建函数
    *
    ******************************************************************************/
	string FileLogName();

    /******************************************************************************
    * 函数名:JCLogWrapper.LogMode
    * 描述: 当前日志输出模式
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/02 20:30:22, lys 创建函数
    *
    ******************************************************************************/
	unsigned int LogMode();

    /******************************************************************************
    * 函数名:JCLogWrapper.LogLevel
    * 描述: 当前日志打印等级
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/02 20:30:50, lys 创建函数
    *
    ******************************************************************************/
	unsigned char LogLevel();

    /******************************************************************************
    * 函数名:JCLogWrapper.LogModule
    * 描述: 当前日志的模块掩码
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/02 20:29:38, lys 创建函数
    *
    ******************************************************************************/
	__int64 LogModule();

	void InitSockLog(JCNetworkManager* pSock);
protected:
	JCFileLog m_tLogF;
	JCDynamicLog m_tLogD;
	JCNetworkManager* m_tSock;
    unsigned int m_nMode;
	__int64 m_nModuleMask;
	unsigned char m_nLevelMask;
	bool m_bOnOff;

    /******************************************************************************
    * 函数名:JCLogWrapper.MakeLogPrefix
    * 描述: 构造日志信息的前缀, 可通过继承后重写实现定制的日志前缀
    *       当前前缀形式为[2014-02-08 12:34:56.837][线程ID][模块名称][日志级别]:
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/28 23:16:25, lys 创建函数
    *
    ******************************************************************************/
	virtual string MakeLogPrefix(unsigned int nModuleId, unsigned int nLevel);

    /******************************************************************************
    * 函数名:JCLogWrapper.ModuleName
    * 描述: 根据模块ID翻译模块名, 可继承重写定制日志打印时的模块名称
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/28 23:18:48, lys 创建函数
    *
    ******************************************************************************/
	virtual string ModuleName(unsigned int nModuleId);

    /******************************************************************************
    * 函数名:JCLogWrapper.Verify
    * 描述: 日志的过滤规则,可继承后重写定制自己的过滤规则(动态日志输出过滤条件)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/28 23:20:5, lys 创建函数
    *
    ******************************************************************************/
	virtual bool Verify(unsigned int nModuleId, unsigned int nLevel);

	/******************************************************************************
    * 函数名:JCLogWrapper.VerifyFileLog
    * 描述: 文件日志的过滤规则,可继承后重写定制自己的过滤规则(固定文件日志的输出过滤条件)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/28 23:20:5, lys 创建函数
    *
    ******************************************************************************/
	virtual bool VerifyFileLog(unsigned int nLevel);

    /******************************************************************************
    * 函数名:JCLogWrapper.OutputLog
    * 描述: 动态输出日志接口,可继承后重写定制自己的输出规则(console/debugview/telnet)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/29 18:52:52, lys 创建函数
    *
    ******************************************************************************/
	virtual void OutputLog(const string &strMsg);

    /******************************************************************************
    * 函数名:JCLogWrapper.OutputLog
    * 描述: 输出文件日志接口,可继承后重写定制自己的输出规则
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/29 18:52:52, lys 创建函数
    *
    ******************************************************************************/
	virtual void OutputFileLog(const string &strMsg);

	void Logc(const string &strMsg);
	string LevelInfo(unsigned int nLevel);
	JCCriticalSection m_tCs;
};

#endif /* _JCLOG_H_ */

