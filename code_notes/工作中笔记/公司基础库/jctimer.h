/******************************************************************************
* 文件名: jctimer.h
* 描述: 延时器, 定时器
* Copyright(c)2014-2016 JCDZ Co.,Ltd.
*
* 修改记录:
* --------------------
* v1.0   2014/03/14 15:44:52, lys 创建文件
*
******************************************************************************/
#ifndef _JCTIMER_H_
#define _JCTIMER_H_

#if defined(__linux) || defined(__APPLE__) || defined(__CYGWIN__)
#include <time.h>
#include <unistd.h>
typedef long long __int64;
#else
#include <windows.h>
#endif

#include "jcLock.hpp"
#include "jcnonecopy.h"
#include "jclink.h"
#include "jcbase.h"

class JCThread;

class DLL_EXPORT JCDelay : public JCNonecopy
{
public:
	JCDelay();
	virtual ~JCDelay();

    /******************************************************************************
    * 函数名:JCDelay.UnblockDelay
    * 描述: 非阻塞延迟函数(单位 ms), 延迟时可以程序继续响应windows消息, 可在诸如
    *       界面线程使用,避免延时时界面失去响应
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/18 15:11:28, lys 创建函数
    *
    ******************************************************************************/
	virtual void UnblockDelay(unsigned long nWaitTime);

    /******************************************************************************
    * 函数名:JCDelay.BlockDelay
    * 描述: 阻塞性延时函数, Sleep的封装(单位ms)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/18 15:13:39, lys 创建函数
    *
    ******************************************************************************/
	virtual void BlockDelay(unsigned long nWaitTime);

    /******************************************************************************
    * 函数名:JCDelay
    * 描述: 非阻塞延时函数内的延时实现
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/18 15:14:39, lys 创建函数
    *
    ******************************************************************************/
	virtual void DelayProc();

private:
	struct DelayInfo
	{
		unsigned long m_nDuration;
		HANDLE m_hEventHandle;
	};

    /******************************************************************************
    * 函数名:JCDelay.DelayThread
    * 描述: 非阻塞延时函数的线程入口
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/18 15:15:42, lys 创建函数
    *
    ******************************************************************************/
	static unsigned long WINAPI DelayThread(LPVOID pDelay);

	DelayInfo m_nDelayInfo;
};


typedef void (*TIMER_HANDLER)(void *);

#define TIMER_ID_MAX         0xFFFFFFFE          /*在不同TIMER ID表示不同的TIMER前提下, TIMER ID(0-0xFFFFFFFE)决定了同时支持TIMER的最大个数*/
#define INVALID_TIMER_ID     ((unsigned int)-1)
#define TIMER_WHEEL_SLICING  20                  /*时间轮分片长度(ms), 决定了定时器调度的精度, 时间轮转动一次为一个TICK,为一个分片时长*/

class JCTimerManager;
class DLL_EXPORT JCTimer : public JCNonecopy
{
	friend class JCTimerManager;
public:
    /******************************************************************************
    * 函数名:JCTimer.JCTimer
    * 描述: 用户定时器构造
    *
    * 输入: 定时器管理器地址
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:30:13, lys 创建函数
    *
    ******************************************************************************/
	JCTimer();
	JCTimer(JCTimerManager *pManager);
	virtual~JCTimer();

	enum TimerType
	{
		LOOP,
		ONCE
	};

	enum WorkState
	{
		RUN,
		STOP
	};

	/******************************************************************************
    * 函数名:JCTimer.SetManager
    * 描述: 设置定时器将加入的定时器管理器
    *
    * 输入: 管理器地址
    * 输出:
    * 返回值: true 成功
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:31:15, lys 创建函数
    *
    ******************************************************************************/
	bool SetManager(JCTimerManager *pManager);

    /******************************************************************************
    * 函数名:JCTimer.SetHandler
    * 描述: 设置定时回调函数
    *
    * 输入:回调函数地址, pPara回调函数参数
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:31:15, lys 创建函数
    *
    ******************************************************************************/
	bool SetHandler(TIMER_HANDLER pProc, void *pPara = NULL);

    /******************************************************************************
    * 函数名:JCTimer.StartLoop
    * 描述: 启动循环定时器
    *
    * 输入: 定时时间间隔
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:31:54, lys 创建函数
    *
    ******************************************************************************/
	bool StartLoop(unsigned int nInterval);

    /******************************************************************************
    * 函数名:JCTimer.StartLoop
    * 描述: 启动循环定时器重载函数
    *
    * 输入: 时间间隔和回调函数地址, pPara回调函数参数
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:32:48, lys 创建函数
    *
    ******************************************************************************/
	bool StartLoop(unsigned int nInterval, TIMER_HANDLER pHandler, void *pPara = NULL);

    /******************************************************************************
    * 函数名:JCTimer.StartOnce
    * 描述: 启动单次触发定时器
    *
    * 输入: 时间间隔
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:33:37, lys 创建函数
    *
    ******************************************************************************/
	bool StartOnce(unsigned int nInterval);

    /******************************************************************************
    * 函数名:JCTimer.StartOnce
    * 描述: 启动单次触发定时器重载函数
    *
    * 输入: 时间间隔和回调函数地址
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:34:24, lys 创建函数
    *
    ******************************************************************************/
	bool StartOnce(unsigned int nInterval, TIMER_HANDLER pHandler,void *pPara);

    /******************************************************************************
    * 函数名:JCTimer.IsRunning
    * 描述: 定时器是否运行
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:35:8, lys 创建函数
    *
    ******************************************************************************/
	bool IsRunning();

    /******************************************************************************
    * 函数名:JCTimer.IsStop
    * 描述: 定时器是否已停止
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:35:41, lys 创建函数
    *
    ******************************************************************************/
	bool IsStop();

    /******************************************************************************
    * 函数名:JCTimer.Stop
    * 描述: 停止定时器
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:37:30, lys 创建函数
    *
    ******************************************************************************/
	bool Stop();

    /******************************************************************************
    * 函数名:JCTimer.Interval
    * 描述: 获取设置的时间间隔(以时间轮Tick为单位)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:40:12, lys 创建函数
    *
    ******************************************************************************/
	unsigned int Interval();

    /******************************************************************************
    * 函数名:JCTimer.RealInterval
    * 描述: 实际时间间隔(ms为单位, 默认精度为20ms, 由定时器管理器调度精度决定)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:40:52, lys 创建函数
    *
    ******************************************************************************/
	unsigned int RealInterval();

    /******************************************************************************
    * 函数名:JCTimer.TimerId
    * 描述: 定时器ID
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:41:58, lys 创建函数
    *
    ******************************************************************************/
	unsigned int TimerId();

    /******************************************************************************
    * 函数名:JCTimer.IsLoopTimer
    * 描述: 循环定时器
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:42:21, lys 创建函数
    *
    ******************************************************************************/
	bool IsLoopTimer();

    /******************************************************************************
    * 函数名:JCTimer.IsOnceTimer
    * 描述: 单次触发定时器
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:42:47, lys 创建函数
    *
    ******************************************************************************/
	bool IsOnceTimer();

    /******************************************************************************
    * 函数名:JCTimer.IsManagerValid
    * 描述: 定时器管理器是否有效
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:43:46, lys 创建函数
    *
    ******************************************************************************/
	bool IsManagerValid();

    /******************************************************************************
    * 函数名:JCTimer.IsPending
    * 描述: 定时器是否在管理器列表中,也是定时器是否运行的标志
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:44:18, lys 创建函数
    *
    ******************************************************************************/
	bool IsPending();

	/******************************************************************************
    * 函数名:JCTimer.LinkPoint
    * 描述: 获取定时器的挂载点成员
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:45:3, lys 创建函数
    *
    ******************************************************************************/
	JCDoubleLinkNode &LinkPoint();

    /******************************************************************************
    * 函数名:JCTimer.PrintTimer
    * 描述: 打印定时器相关信息
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/26 17:45:3, lys 创建函数
    *
    ******************************************************************************/
	void PrintTimer();

private:
	void TimerHandle();
	bool Start(unsigned int nInterval, TimerType eType);
	JCTimerManager* m_pManager;
	void *m_pPara;
	unsigned int m_nInterval;     /*定时器时长, 以定时器管理器Tick为单位*/
	unsigned int m_nRealInterval; /*定时器实际时长(ms), 为 定时器Tick数 * 定时器管理器Tick时长*/
	__int64 m_nTimeExpires;
	unsigned int m_nTimerId;
	WorkState m_eWorkState;
	TimerType m_eTimerType;
	JCDoubleLinkNode m_tLinkNode;
	TIMER_HANDLER m_pHandler;
};

/******************************************************************************
* 函数名:JCTimerManager
* 描述: 使用Hashed and Hierarchical Timing Wheels方法对Timers实现O(1)的调度
*
* 输入:
* 输出:
* 返回值:
*
* 修改记录:
* --------------------
*    2014/03/23 13:58:4, lys 创建函数
*
******************************************************************************/
struct TimerWheel;

class DLL_EXPORT JCTimerManager : public JCNonecopy
{
public:
	JCTimerManager();
	virtual~JCTimerManager();

    /******************************************************************************
    * 函数名:JCTimerManager.Run
    * 描述: 启动定时器管理器
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 8:57:51, lys 创建函数
    *
    ******************************************************************************/
	bool Run();

    /******************************************************************************
    * 函数名:JCTimerManager.Stop
    * 描述: 停止管理器调度线程运行.可使用Run再次启动管理器,如果之前运行的定时器没有删除
    *       ,将仍然被管理器调度
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 9:22:1, lys 创建函数
    *
    ******************************************************************************/
	void Stop();

    /******************************************************************************
    * 函数名:JCTimerManager.IsRunning
    * 描述: 管理器调度线程是否运行
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 9:23:45, lys 创建函数
    *
    ******************************************************************************/
	bool IsRunning();

    /******************************************************************************
    * 函数名:JCTimerManager.TimerWheelSlicing
    * 描述: 调度时间片长度,单位ms(可以理解为定时器精度)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 9:24:11, lys 创建函数
    *
    ******************************************************************************/
	unsigned int TimerWheelSlicing();

    /******************************************************************************
    * 函数名:JCTimerManager.SetTimerWheelSlicing
    * 描述: 设置调度时间片长度,单位ms.(不建议在管理器运行后更改)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 9:24:47, lys 创建函数
    *
    ******************************************************************************/
	bool SetTimerWheelSlicing(unsigned int nInterval);

    /******************************************************************************
    * 函数名:JCTimerManager.SetTimerWheelSlicing
    * 描述: 向定时器管理器添加定时器对象
    *
    * 输入:
    * 输出:
    * 返回值: Timer ID
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 9:24:47, lys 创建函数
    *
    ******************************************************************************/
	unsigned int AddTimer(JCTimer *pTimer);

    /******************************************************************************
    * 函数名:JCTimerManager.EraseTimer
    * 描述: 从管理器删除一个已加入的定时器
    *
    * 输入:pTimer应该是一个被加入到管理器的定时器,否则什么都不做
    * 输出:
    * 返回值: Timer ID
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 9:26:46, lys 创建函数
    *
    ******************************************************************************/
	unsigned int EraseTimer(JCTimer *pTimer);

    /******************************************************************************
    * 函数名:JCTimerManager.ShowTimerInfo
    * 描述: 显示当前管理器中所有定时器信息
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 9:28:14, lys 创建函数
    *
    ******************************************************************************/
	void ShowTimerInfo();

private:
	TimerWheel *m_ptTimerWheel;
	__int64 m_nCurTick;
	JCThread *m_pTickThread;
	bool m_bRunning;
	unsigned int m_nTimerWheelSlicing;
	unsigned int m_nTimerCount;/*用于标识定时器,允许定时器删除后ID空闲*/
	JCCriticalSection m_tCs;

	int TimerIdIncrease();
	int Cascade(JCDoubleLinkNode *tv, int nIndex);
	void AddTimerInter(JCTimer *pTimer);
	void ShowTVRTimerInfo();
	void ShowTVNTimerInfo(JCDoubleLinkNode *pTvn);
	virtual void TickProc();
	static unsigned long WINAPI TickThread(LPVOID pParam);
};




#endif /* _JCTIMER_H_ */

