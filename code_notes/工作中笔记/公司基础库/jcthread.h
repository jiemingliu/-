/******************************************************************************
* 文件名: jcthread.h
* 描述: 线程及线程控制等封装
* Copyright(c)2014-2016 JCDZ Co.,Ltd.
*
* 修改记录:
* --------------------
* v1.0   2014/03/19 17:33:45, lys 创建文件
*
******************************************************************************/
#ifndef _JCTHREAD_H_
#define _JCTHREAD_H_

#if defined(__linux) || defined(__APPLE__) || defined(__CYGWIN__)
#include <pthread.h>
#include <semaphore.h>
#include <string>
#include "jcnonecopy.h"
#include "jcbase.h"
typedef void * LPVOID;
#define INFINITE 0xFFFFFFFF 
#define WAIT_FAILED ((DWORD)0xFFFFFFFF)
#define STILL_ACTIVE 1001
#define THREAD_PRIORITY_ERROR_RETURN 0x7fffffff
#define __stdcall

using namespace std;

typedef void *(*THREAD_ENTRY)(void *);

class DLL_EXPORT JCEvent : public JCNonecopy
{
public:
	JCEvent(bool bManualReset = true, bool bInitState = true, const string &strName = "");
	~JCEvent();
	bool IsValid();
	bool Set();
	bool Reset();
	unsigned long Wait( unsigned long nTimeout = INFINITE );
	bool Clear();

private:
	void InitEvent();
	void DestroyEvent();

private:
	pthread_cond_t  m_cond;
	pthread_mutex_t m_mutex;
	bool m_bIsInited;
};

class DLL_EXPORT JCSemaphore : public JCNonecopy
{
public:
	JCSemaphore(unsigned int nInitCount, unsigned int nMaxCount, const string &strName = "");
	~JCSemaphore();

	bool IsValid();
	unsigned long Wait(unsigned long nTimeout = INFINITE);
	bool Signal();
	bool Release(long nReleaseCount = 1);
	bool Clear();

private:
	sem_t m_sem;
	bool m_bIsInited;
};

class DLL_EXPORT JCThread : public JCNonecopy
{
public:

    /******************************************************************************
    * 函数名:JCThread.JCThread
    * 描述: 默认创建线程后挂起
    *
    * 输入: bAutoClear 表明是否在对象析构时自动清除所创建线程的内核对象, true-是 false-否
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:5:57, lys 创建函数
    *
    ******************************************************************************/
	JCThread(THREAD_ENTRY pEntry, void * pParam, unsigned long nInitflag = PTHREAD_CREATE_JOINABLE
		, unsigned long nStackSize = 0, bool bAutoClear = true);

    /******************************************************************************
    * 函数名:JCThread.~JCThread
    * 描述: 析构函数,根据构造时清除选项参数决定是否自动释放线程内核对象TCB,即ClearThreadTCB
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:31:42, lys 创建函数
    *
    ******************************************************************************/
    ~JCThread();

    /******************************************************************************
    * 函数名:JCThread.IsValid
    * 描述: 判断线程(线程控制块)是否创建成功
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:6:40, lys 创建函数
    *
    ******************************************************************************/
	bool IsValid();

    /******************************************************************************
    * 函数名:JCThread.Resume
    * 描述: 唤醒线程
    *
    * 输入:
    * 输出:
    * 返回值: false 线程无效或唤醒失败
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:7:18, lys 创建函数
    *
    ******************************************************************************/
	bool Resume();

    /******************************************************************************
    * 函数名:JCThread.Suspend
    * 描述: 挂起线程
    *
    * 输入:
    * 输出:
    * 返回值: false 线程无效或挂起失败
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:8:6, lys 创建函数
    *
    ******************************************************************************/
	bool Suspend();

    /******************************************************************************
    * 函数名:JCThread.Terminate
    * 描述: 终止线程对象内维护的线程(可能导致其所在进程退出,且不清除线程相关资源,慎用)
    *       最好的方法是线程函数自行退出,没有安全隐患
    * 输入: 线程退出时返回给操作系统的返回值
    * 输出:
    * 返回值: false 线程无效或终止失败
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:8:38, lys 创建函数
    *
    ******************************************************************************/
	bool Terminate(unsigned long nExitCode);

    /******************************************************************************
    * 函数名:JCThread.GetExitCode
    * 描述: 获取线程退出时返回值
    *
    * 输入:
    * 输出: nExitCode线程返回值
    * 返回值: false 线程无效或获取返回值失败
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:9:56, lys 创建函数
    *
    ******************************************************************************/
	bool GetExitCode(unsigned long &nExitCode);

    /******************************************************************************
    * 函数名:JCThread.SetPriority
    * 描述: 设置线程优先级
    *
    * 输入: 线程优先级
    * 输出:
    * 返回值: false 线程无效或设置失败
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:11:13, lys 创建函数
    *
    ******************************************************************************/
	bool SetPriority(int nPriority);

    /******************************************************************************
    * 函数名:JCThread.GetPriority
    * 描述: 获取线程优先级
    *
    * 输入:
    * 输出:
    * 返回值: false 线程无效或获取失败
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:12:12, lys 创建函数
    *
    ******************************************************************************/
	bool GetPriority(int &nPriority);

    /******************************************************************************
    * 函数名:JCThread.GetCreatedThreadId
    * 描述: 获取线程对象内部维护创建的线程ID
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:13:0, lys 创建函数
    *
    ******************************************************************************/
	unsigned long GetCreatedThreadId();

    /******************************************************************************
    * 函数名:JCThread.GetLocalThreadId
    * 描述: 获取当前调用位置所在线程的ID
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:13:35, lys 创建函数
    *
    ******************************************************************************/
	unsigned long GetLocalThreadId();

    /******************************************************************************
    * 函数名:JCThread.ClearThreadTCB
    * 描述: CloseHandle手动清除线程控制块内核对象(因线程对象使用_beginthreadex,并不会自动回收内核对象)
    *       可在初始化时选择自动清除选项, 对象析构时自动回收
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 15:43:59, lys 创建函数
    *
    ******************************************************************************/
	bool ClearThreadTCB();

    /******************************************************************************
    * 函数名:JCThread.RealStackSize
    * 描述: 获取线程栈空间实际大小(单位:字节 实际不准,待深究)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 16:35:38, lys 创建函数
    *
    ******************************************************************************/
	unsigned long RealStackSize();

    /******************************************************************************
    * 函数名:JCThread.IsRunning
    * 描述: 通过线程退出返回值为STILL_ACTIVE判断线程是否还在运行
    *       因线程函数结束时返回值作为线程退出返回值,若这个指定值也为STILL_ACTIVE则此判断无效
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 16:9:59, lys 创建函数
    *
    ******************************************************************************/
	bool IsRunning();

    /******************************************************************************
    * 函数名:JCThread.Exit
    * 描述: 用于创建的线程强制关闭
    *       当在创建线程内部调用时,使用_endthreadex退出线程
    *       在创建线程外部调用时,使用TerminateThread
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 16:10:2, lys 创建函数
    *
    ******************************************************************************/
	void Exit(unsigned long nExitCode);

private:
	THREAD_ENTRY           m_pEntry;
	void*                  m_pParam ;
	pthread_t              m_hThread;
	pthread_attr_t		   m_tThreadAttr;
	JCEvent				   m_terminatedEvent;
	unsigned long          m_nStackSize;
	bool                   m_bClearTag;
};

#else /*end linux*/

#include <windows.h>
#include <string>
#include "jcnonecopy.h"
#include "jcbase.h"

using namespace std;

typedef unsigned (__stdcall *THREAD_ENTRY)(void *);

class DLL_EXPORT JCEvent : public JCNonecopy
{
public:
	JCEvent(bool bManualReset = true, bool bInitState = true, const string &strName = "");
	~JCEvent();
	bool IsValid();
	bool Set();
	bool Reset();
	unsigned long Wait( unsigned long nTimeout = INFINITE );
	HANDLE GetHandle();

private:
	bool Clear();

protected:
	HANDLE m_hEvent;
};

class DLL_EXPORT JCSemaphore : public JCNonecopy
{
public:
	JCSemaphore(unsigned int nInitCount, unsigned int nMaxCount, const string &strName = "");
	~JCSemaphore();

	bool IsValid();
	unsigned long Wait(unsigned long nTimeout = INFINITE);
	bool Signal();
	bool Release(long nReleaseCount = 1);
	HANDLE GetHandle();

private:
	bool Clear();

protected:
	HANDLE m_hSemaphore;
};

class DLL_EXPORT JCThread : public JCNonecopy
{
public:

    /******************************************************************************
    * 函数名:JCThread.JCThread
    * 描述: 默认创建线程后挂起
    *
    * 输入: bAutoClear 表明是否在对象析构时自动清除所创建线程的内核对象, true-是 false-否
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:5:57, lys 创建函数
    *
    ******************************************************************************/
	JCThread(THREAD_ENTRY pEntry, void * pParam, unsigned long nInitflag = CREATE_SUSPENDED
		, unsigned long nStackSize = 0, bool bAutoClear = true);

    /******************************************************************************
    * 函数名:JCThread.~JCThread
    * 描述: 析构函数,根据构造时清除选项参数决定是否自动释放线程内核对象TCB,即ClearThreadTCB
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:31:42, lys 创建函数
    *
    ******************************************************************************/
    ~JCThread();

    /******************************************************************************
    * 函数名:JCThread.IsValid
    * 描述: 判断线程(线程控制块)是否创建成功
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:6:40, lys 创建函数
    *
    ******************************************************************************/
	bool IsValid();

    /******************************************************************************
    * 函数名:JCThread.Resume
    * 描述: 唤醒线程
    *
    * 输入:
    * 输出:
    * 返回值: false 线程无效或唤醒失败
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:7:18, lys 创建函数
    *
    ******************************************************************************/
	bool Resume();

    /******************************************************************************
    * 函数名:JCThread.Suspend
    * 描述: 挂起线程
    *
    * 输入:
    * 输出:
    * 返回值: false 线程无效或挂起失败
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:8:6, lys 创建函数
    *
    ******************************************************************************/
	bool Suspend();

    /******************************************************************************
    * 函数名:JCThread.Terminate
    * 描述: 终止线程对象内维护的线程(可能导致其所在进程退出,且不清除线程相关资源,慎用)
    *       最好的方法是线程函数自行退出,没有安全隐患
    * 输入: 线程退出时返回给操作系统的返回值
    * 输出:
    * 返回值: false 线程无效或终止失败
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:8:38, lys 创建函数
    *
    ******************************************************************************/
	bool Terminate(unsigned long nExitCode);

    /******************************************************************************
    * 函数名:JCThread.GetExitCode
    * 描述: 获取线程退出时返回值
    *
    * 输入:
    * 输出: nExitCode线程返回值
    * 返回值: false 线程无效或获取返回值失败
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:9:56, lys 创建函数
    *
    ******************************************************************************/
	bool GetExitCode(unsigned long &nExitCode);

    /******************************************************************************
    * 函数名:JCThread.SetPriority
    * 描述: 设置线程优先级
    *
    * 输入: 线程优先级
    * 输出:
    * 返回值: false 线程无效或设置失败
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:11:13, lys 创建函数
    *
    ******************************************************************************/
	bool SetPriority(int nPriority);

    /******************************************************************************
    * 函数名:JCThread.GetPriority
    * 描述: 获取线程优先级
    *
    * 输入:
    * 输出:
    * 返回值: false 线程无效或获取失败
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:12:12, lys 创建函数
    *
    ******************************************************************************/
	bool GetPriority(int &nPriority);

    /******************************************************************************
    * 函数名:JCThread.GetCreatedThreadId
    * 描述: 获取线程对象内部维护创建的线程ID
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:13:0, lys 创建函数
    *
    ******************************************************************************/
	unsigned long GetCreatedThreadId();

    /******************************************************************************
    * 函数名:JCThread.GetLocalThreadId
    * 描述: 获取当前调用位置所在线程的ID
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:13:35, lys 创建函数
    *
    ******************************************************************************/
	unsigned long GetLocalThreadId();

	/******************************************************************************
    * 函数名:JCThread.GetThreadHandle
    * 描述: 获取线程句柄
    *
    * 输入:
    * 输出: 
    * 返回值: 线程句柄
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 14:9:56, lys 创建函数
    *
    ******************************************************************************/
	HANDLE GetThreadHandle();

    /******************************************************************************
    * 函数名:JCThread.RealStackSize
    * 描述: 获取线程栈空间实际大小(单位:字节 实际不准,待深究)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 16:35:38, lys 创建函数
    *
    ******************************************************************************/
	unsigned long RealStackSize();

    /******************************************************************************
    * 函数名:JCThread.IsRunning
    * 描述: 通过线程退出返回值为STILL_ACTIVE判断线程是否还在运行
    *       因线程函数结束时返回值作为线程退出返回值,若这个指定值也为STILL_ACTIVE则此判断无效
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 16:9:59, lys 创建函数
    *
    ******************************************************************************/
	bool IsRunning();

    /******************************************************************************
    * 函数名:JCThread.Exit
    * 描述: 用于创建的线程强制关闭
    *       当在创建线程内部调用时,使用_endthreadex退出线程
    *       在创建线程外部调用时,使用TerminateThread
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 16:10:2, lys 创建函数
    *
    ******************************************************************************/
	void Exit(unsigned long nExitCode);

private:
	    /******************************************************************************
    * 函数名:JCThread.ClearThreadTCB
    * 描述: CloseHandle手动清除线程控制块内核对象(因线程对象使用_beginthreadex,并不会自动回收内核对象)
    *       可在初始化时选择自动清除选项, 对象析构时自动回收
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/21 15:43:59, lys 创建函数
    *
    ******************************************************************************/
	bool ClearThreadTCB();

	THREAD_ENTRY           m_pEntry;
	void*                  m_pParam ;
	HANDLE                 m_hThread;
	unsigned long          m_nThreadId;
	unsigned long          m_nStackSize;
	bool                   m_bClearTag;
};
#endif /*end win32*/
#endif /* _JCTHREAD_H_ */

