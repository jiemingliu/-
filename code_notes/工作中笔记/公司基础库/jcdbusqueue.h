/******************************************************************************
* 文件名: jcdbusqueue.h
* 描述: 消息队列
* Copyright(c)2014-2016 JCDZ Co.,Ltd.
*
* 修改记录:
* --------------------
* v1.0   2014/03/31 19:35:44, lys 创建文件
*
******************************************************************************/
#ifndef _JCDBUSQUEUE_H_
#define _JCDBUSQUEUE_H_

#include "jcbase.h"
#include "jclink.h"
#include "jcLock.hpp"
#include "jcthread.h"
#include "jcdbusmsg.h"

#define QUEUE_SIZE  512
#define SYNC_TIME   3000

/******************************************************************************
* 函数名:JCDbusQueue
* 描述: JCDbus消息队列
*
* 输入:
* 输出:
* 返回值:
*
* 修改记录:
* --------------------
*    2014/04/02 17:4:12, lys 创建函数
*
******************************************************************************/
class JCDbusQueue
{
public:
    /******************************************************************************
    * 函数名:JCDbusQueue.JCDbusQueue
    * 描述: 默认构造消息队列容量为512条
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/02 17:4:26, lys 创建函数
    *
    ******************************************************************************/
	JCDbusQueue(unsigned int nQueueSize = QUEUE_SIZE);
	virtual ~JCDbusQueue();

    /******************************************************************************
    * 函数名:JCDbusQueue.PushFront
    * 描述: 在队列最前端插入消息
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/02 17:4:54, lys 创建函数
    *
    ******************************************************************************/
	bool PushFront(const JCDbusMsg &tMsg);

    /******************************************************************************
    * 函数名:JCDbusQueue.PushBack
    * 描述: 在队列末端插入消息
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/02 17:5:27, lys 创建函数
    *
    ******************************************************************************/
	bool PushBack(const JCDbusMsg &tMsg);

    /******************************************************************************
    * 函数名:JCDbusQueue.PopFront
    * 描述: 取队列最前端消息
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/02 17:6:30, lys 创建函数
    *
    ******************************************************************************/
	bool PopFront(JCDbusMsg &tMsg);

    /******************************************************************************
    * 函数名:JCDbusQueue.PopBack
    * 描述: 取队列最末端消息
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/02 17:7:4, lys 创建函数
    *
    ******************************************************************************/
	bool PopBack(JCDbusMsg &tMsg);

    /******************************************************************************
    * 函数名:JCDbusQueue.PopSpecMsg
    * 描述: 以阻塞方式获取指定消息(阻塞最大时长默认3000ms)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/02 17:7:39, lys 创建函数
    *
    ******************************************************************************/
	bool PopSpecMsg(const JCDbusMsgInfo &tInfo, JCDbusMsg &tMsg, unsigned int nTimeOut = SYNC_TIME);

	/******************************************************************************
    * 函数名:JCDbusQueue.PopSpecClientMsg
    * 描述: 以阻塞方式获取指定client的指定消息(阻塞最大时长默认3000ms)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/02 17:7:39, lys 创建函数
    *
    ******************************************************************************/
	bool PopSpecClientMsg(const JCDbusMsgInfo &tInfo, JCDbusMsg &tMsg, unsigned int nTimeOut = SYNC_TIME);

    /******************************************************************************
    * 函数名:JCDbusQueue.ClearAllSpecMsg
    * 描述: 清除队列内所有指定消息
    *
    * 输入: 消息标识
    * 输出: 实际清除的消息数目
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/10/17 10:42:9, lys 创建函数
    *
    ******************************************************************************/
	unsigned int ClearAllSpecMsg(const JCDbusMsgInfo &tInfo);

    /******************************************************************************
    * 函数名:JCDbusQueue.MessageCount
    * 描述: 队列当前消息数目
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/02 17:8:34, lys 创建函数
    *
    ******************************************************************************/
	unsigned int MessageCount();

    /******************************************************************************
    * 函数名:JCDbusQueue.ShowQueue
    * 描述: 打印队列所有消息信息,供调试用
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/02 17:8:56, lys 创建函数
    *
    ******************************************************************************/
	void ShowQueue();

    /******************************************************************************
    * 函数名:JCDbusQueue.IsFull
    * 描述: 队列是否已满
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:16:54, lys 创建函数
    *
    ******************************************************************************/
	bool IsFull();

    /******************************************************************************
    * 函数名:JCDbusQueue.IsEmpty
    * 描述: 队列是否空的
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:17:22, lys 创建函数
    *
    ******************************************************************************/
	bool IsEmpty();

    /******************************************************************************
    * 函数名:JCDbusQueue.SetQueueSize
    * 描述: 设置队列消息容量
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/04/03 10:44:28, lys 创建函数
    *
    ******************************************************************************/
	void SetQueueSize(unsigned int nSize);

private:
	void FreeQueue();
	JCDoubleLinkNode m_tHeadNode;
	JCSemaphore m_tSemaphore;
	JCCriticalSection m_tCs;
	unsigned int m_nQueueSize;
	unsigned int m_nNowSize;
};
#endif /* _JCDBUSQUEUE_H_ */


