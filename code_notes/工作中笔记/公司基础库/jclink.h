/******************************************************************************
* 文件名: jclink.h
* 描述: 链表类型
* Copyright(c)2014-2016 JCDZ Co.,Ltd.
*
* 修改记录:
* --------------------
* v1.0   2014/03/25 10:42:53, lys 创建文件
*
******************************************************************************/
#ifndef _JCLINK_H_
#define _JCLINK_H_

#include "jcbase.h"

/******************************************************************************
* 函数名:JCDoubleLinkNode
* 描述: 类似Linux的双向链表,只用来链接,并不指向数据。当使用此类型链接数据时,应
*       将双向链表节点作为数据类型的一个成员,可利用MEMBER_CONTAINER通过链表节点指针
*       获取整个数据结构的起始指针
* 输入:
* 输出:
* 返回值:
*
* 修改记录:
* --------------------
*    2014/03/25 11:7:5, lys 创建函数
*
******************************************************************************/
class DLL_EXPORT JCDoubleLinkNode
{
public:
    /******************************************************************************
    * 函数名:JCDoubleLinkNode.JCDoubleLinkNode
    * 描述: 构造一个双向链表节点
    *
    * 输入:bAutobreak为true,表示节点在析构时先自动从已挂载的链表上断开
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 9:51:47, lys 创建函数
    *
    ******************************************************************************/
    JCDoubleLinkNode(bool bAutobreak = false);
    virtual~JCDoubleLinkNode();

    /******************************************************************************
    * 函数名:JCDoubleLinkNode.LinkToTail
    * 描述: 将节点链接到指定节点为头的链表尾部,即指定节点之前
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 9:53:48, lys 创建函数
    *
    ******************************************************************************/
	void LinkToTail(JCDoubleLinkNode &tHead);

    /******************************************************************************
    * 函数名:JCDoubleLinkNode.LinkToHead
    * 描述: 将节点链接到指定节点为头的链表的头部,即指定节点之后
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 9:54:54, lys 创建函数
    *
    ******************************************************************************/
	void LinkToHead(JCDoubleLinkNode &tHead);

    /******************************************************************************
    * 函数名:JCDoubleLinkNode.ReplaceNode
    * 描述: 替换掉链表中的指定节点
    *
    * 输入: 被替换节点
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 9:55:18, lys 创建函数
    *
    ******************************************************************************/
	void ReplaceNode(JCDoubleLinkNode &tOld);

    /******************************************************************************
    * 函数名:JCDoubleLinkNode.MoveToTail
    * 描述: 将已在链表中的节点移动到指定节点为头的链表的尾部,即指定节点之前(先将本节点从原链表卸载,再链接到指定节点,
    *       可以在同一链表中移动)
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 9:56:29, lys 创建函数
    *
    ******************************************************************************/
	void MoveToTail(JCDoubleLinkNode &tHead);

    /******************************************************************************
    * 函数名:JCDoubleLinkNode.MoveToHead
    * 描述: 将已在链表中的节点移动到指定节点为头的链表的头部,即指定节点之后,(先将本节点从原链表卸载,再链接到指定节点,
    *       可以在同一链表中移动)
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 9:58:59, lys 创建函数
    *
    ******************************************************************************/
	void MoveToHead(JCDoubleLinkNode &tHead);

    /******************************************************************************
    * 函数名:JCDoubleLinkNode.IsLastNode
    * 描述: 判断节点是否一个指定链表的最后一个节点
    *
    * 输入: 指定链表的头节点
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 9:59:43, lys 创建函数
    *
    ******************************************************************************/
	bool IsLastNode(JCDoubleLinkNode &tHead);

    /******************************************************************************
    * 函数名:JCDoubleLinkNode.BreakLink
    * 描述: 将节点从挂载的链表上卸载掉.若没有挂载过,则什么也不做
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 10:0:44, lys 创建函数
    *
    ******************************************************************************/
	void BreakLink();

    /******************************************************************************
    * 函数名:JCDoubleLinkNode.IsEmptyLink
    * 描述: 判断链表除头节点外是否有其他节点(当节点作为链表的头节点时使用)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 10:1:27, lys 创建函数
    *
    ******************************************************************************/
	bool IsEmptyLink();

    /******************************************************************************
    * 函数名:JCDoubleLinkNode.OnlyOneNode
    * 描述: 判断链表除头节点外是否只有一个节点(当节点作为链表的头节点时使用)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 10:2:33, lys 创建函数
    *
    ******************************************************************************/
	bool OnlyOneNode();

    /******************************************************************************
    * 函数名:JCDoubleLinkNode.Next
    * 描述: 指向的下一个节点的地址
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 10:4:12, lys 创建函数
    *
    ******************************************************************************/
	JCDoubleLinkNode *Next();

    /******************************************************************************
    * 函数名:JCDoubleLinkNode.Prev
    * 描述: 指向的上一个节点的地址
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 10:4:44, lys 创建函数
    *
    ******************************************************************************/
	JCDoubleLinkNode *Prev();

    /******************************************************************************
    * 函数名:JCDoubleLinkNode.PrintNode
    * 描述: 打印节点信息(包括节点地址,指向的上一个节点地址,指向的下一个节点地址)
    *
    * 输入:
    * 输出:
    * 返回值:
    *
    * 修改记录:
    * --------------------
    *    2014/03/27 10:5:7, lys 创建函数
    *
    ******************************************************************************/
	void PrintNode();

protected:
	JCDoubleLinkNode *m_pPrev;
	JCDoubleLinkNode *m_pNext;
	bool m_bAutobreak;

	void _InitNode(JCDoubleLinkNode *pNode);
	void _AddNode(JCDoubleLinkNode *pNew, JCDoubleLinkNode *pPrev, JCDoubleLinkNode *pNext);
	void _DelNode(JCDoubleLinkNode *pPrev, JCDoubleLinkNode *pNext);
	void _RepNode(JCDoubleLinkNode *pOld, JCDoubleLinkNode *pNew);
};




#endif /* _JCLINK_H_ */



