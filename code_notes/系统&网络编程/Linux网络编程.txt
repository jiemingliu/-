1,四层模型
应用层       应用程序负责处理逻辑
传输层       client <---> server通信，采用tcp或udp协议
网络层       控制路由，节点选择
数据链路层   物理连接 IP <---> Mac地址

2，ping是应用程序，利用ICMP报文检测网络连接

3,访问DNS服务器的客户端程序是host

4,IP协议，为上层协议提供无状态，无连接，不可靠的服务。IP头部信息出现在每个IP数据报中，用于指定IP通信的源端IP地址，目的端IP地址，指导IP分片和重组等。IP协议还负责IP数据报的路由和转发

5，TCP协议，相对于UDP协议，TCP协议面向连接，字节流和可靠传输。
TCP连接是全双工的，是一对一的
TCP头部信息出现在每个TCP报文段中，用于指定通信的源端端口号，目的端端口号。
TCP连接的两端都是状态机。TCP数据流的控制，超时重传和拥塞控制。

6，机器字节序分大端字节序和小端字节序，大端字节序表示高八位存储在低位地址，低八位存储在高位地址，网络字节序是大端字节序

7,网络编程相关命令，netstat查看TCP/IP网络的socket连接信息

在代码层面对socket的理解
利用系统调用 socket()，它返回套接字描述符 (socket descriptor)，这是一个无符号整数，然后再通过它来进行send() 和 recv()调用

socket地址API.网络到本机和本机到网络的字节顺序转换
htons(),h-to-n-s,Host to Network Short,本机到网络字节顺序转换
htonl(),h-to-n-s,Host to Network Long,本机到网络字节顺序转换
ntohs(),n-to-h-s,Network to Host Short
ntohl(),n-to-h-l,Network to Host Long

IP点数和字符串相互转换
ip2string:inet_addr(),将用点分十进制字符串表示的IPv4地址转换为用网络字节序整数表示的IPv4
string2ip:inet_ntoa(),上个函数逆作用

面向连接的数据报套接字流程TCP
socket()
bind()
listen()
accept()
send(),recv()数据读写

无连接的数据报套接字流程UDP
socket()
bind()
listen()
accept()
sendto(),recvfrom()数据读写

其他函数
close(),shutdown()关闭套接字，close实际是引用计数减一，shutdown是强制关闭
getpeername() 告诉你在连接的流式套接字上谁在另外一边
gethostname() 返回你程序所运行的机器的主机名字

高级I/O函数
1.单向管道  int pipe(int fd[2]),管道内部传输的数据是字节流
双向管道 int socketpair(...)
2.重定向标准I/O，dup和dup2
3.readv分散读数据，从文件描述符到分散内存，writev集中写数据，从分散内存集中写到文件描述符
4.sendfile在两个文件描述符直接传递数据，效率高
5.mmap申请内存，munmap释放内存。这段内存可以作为进程间内存共享，也可将文件直接映射其中
6.splice用于两个文件描述符之间直接移动数据，零拷贝操作
7.tee用于两个管道文件描述符之间复制数据，零拷贝操作
8.fcntl用于提供文件描述符各种控制操作
