void Read
{	
	CString sSQL = _T("select field from table");
	if ( adoRs.Open(sSQL, CADORecordset::openQuery) )
	{
		CADOFieldInfo fldInfo;
		long lDataSize = 0;
		if(!adoRs.IsEOF())
		{
			_variant_t	varBLOB;
			BYTE   *  pBuf;

			adoRs.GetFieldValue(0, varBLOB);
			adoRs.GetFieldInfo(0, &fldInfo);
			lDataSize = fldInfo.m_lSize;

			if(varBLOB.vt == (VT_ARRAY | VT_UI1))
			{
				SafeArrayAccessData(varBLOB.parray,(void **)&pBuf);

				CMemFile  file; file.Attach(pBuf, lDataSize);
				CArchive ar(&file, CArchive::load);  

// 从内存文件读取数据
				
				ar.Close(); 
				file.Detach();

				SafeArrayUnaccessData (varBLOB.parray);
			}
		}
		adoRs.Close();
	}
}

BOOL Save()		
{
	

	CADODatabase* pAdo = theApp.GetDataBase();
	CADORecordset adoRs(pAdo);

	CMemFile file;
	CArchive ar(&file, CArchive::store);
	
// 数据序列化到内存文件

	

	ar.Close();
	file.SeekToBegin();
	long nLength = (long)file.GetLength();
	VARIANT		varBLOB;
	SAFEARRAY	*psa;
	SAFEARRAYBOUND	rgsabound[1];
	BYTE bValue;

	rgsabound[0].lLbound = 0;
	rgsabound[0].cElements = nLength;
	psa = SafeArrayCreate(VT_UI1, 1, rgsabound);                      
	for (long i = 0; i < nLength; i++)
	{
		file.Read(&bValue, 1);
		SafeArrayPutElement (psa, &i, &bValue);
	}
	varBLOB.vt = VT_ARRAY | VT_UI1;                                   
	varBLOB.parray = psa; 
	

	CString strSQL = _T("");
	strSQL.Format("select field from table");
	pAdo->BeginTransaction();
	try
	{
		adoRs.Open(strSQL, CADORecordset::openUnknown);
		int ncount = adoRs.GetRecordCount();
		if(!adoRs.IsEOF())
		{
			adoRs.Edit();
			adoRs.SetFieldValue(sField, (_variant_t)varBLOB);
			adoRs.Update();	
		}
		pAdo->CommitTransaction();
	}
	catch (...)
	{
		pAdo->RollbackTransaction();
		
	}

	
}