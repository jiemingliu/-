        通过如果你不希望class支持某一特定机能，只要不声明对应函数就是了。但这个策略对copy构造函数和copy assignment操作符却不起作用，因为条款5已经指出，如果你不声明它们，而某些人尝试调用它们，编译器会为你声明它们。

        这把你逼到了一个困境。如果你不声明copy构造函数或copy assignment操作符，编译器可能会为你产出一份，于是你的class支持copying。如果你声明它们，你的class还是支持copying。但这里的目标却是阻值copying！
    
        答案的关键是，所有编译器产出的函数都是public。为阻止这些函数被创建出来，你的自行声明它们，但这里并没有什么需求使你必须将它们声明为public。因此你可以copy构造函数或copying assignment操作符声明为private。借由明确声明一个成员函数，你阻止了编译器暗自创建其专属版本，而令这些函数为private，使你得以成功阻值人们调用它。
                
        一般而言这个做法并不绝对安全，因为member函数和friend函数还是可以调用你的private函数。除非你够聪明，你去定义它们，那么如果某些人不慎调用任何一个，会获得一个连接错误（linkage error）。
"将成员函数声明为private而且故意不实现它们"。这一伎俩是如此为大家接受。
class HomeForSale{
public:
 ......
private:
 .....
 HomeForSale(const HomeForSale&);	 //只有声明
 HomeForSale& operator = (const HomeForSale&);
};
        将连接期错误移至编译期是可能的（而且那是好事，毕竟越早侦测出错误越好），只要将copy构造函数和copy assignment操作符声明为private就可以办到，但不是在HomeForSale自身，而是专门为了阻止copying动作而设计的base class内。
class Uncopyable
{
protected:
 Uncopyable(){}	 //允许derived对象构造和析构
 ~Uncopyable(){}
private:
 Uncopyable(const Uncopyable&);	 //阻值copying
 Uncopyable& operator=(const Uncopyable&);
};
为求阻值HomeForSale对象被拷贝，我们唯一需要做的就是继承Uncopyable;
class HomeForSale : private Uncopyable{	 //class不再声明
......	 //copy构造函数或copy assign操作符
};
 
请记住：
        为驳回编译器自动（暗自）提供的机能，可将相应地成员函数声明为private并且不予实现。使用像Uncopyable这样的base class也是一种做法。       

