关于"将对象初始化"这事，C++似乎反复无常。

对于内置类型以外的任何其他东西，初始化责任落在构造函数（constructors）身上。规则很简单：确保每一个构造函数都将对象的每一个成员初始化。

对“定义于不同的编译单元内的”non-local static对象的初始化相对次序无明确定义。这是有原因的：决定他们的初始化次序相当困难，非常困难
，根本无解。在其最常见形式，也就是多个编译单元内的non-local static对象经由"模板隐式具现化，implicit template instantiations"形成，不但
不可能决定正确的初始化次序，甚至往往不值得寻找“可决定正确次序”的特殊情况。

幸运的是一个小小的设计便可完全消除这个问题。唯一需要做的是：将每个non-local static对象搬到自己的专属函数内（该对象在此函数内被声明为static）,这些函数返回一个reference指向它所含的对象。然后用户调用这些函数，而不直接指涉这些对象。换句话说，non-local static对象被local static对象替换了。这是Singleton模式的一个常见实现手法。

这个手法的基础在于：C++保证，函数内的local static对象会在"该函数被调用期间""首次遇上该对象之定义式"时被初始化。所以如果你以"函数调用"（返回一个reference指向local static对象）替换"直接访问non-local static对象"你就获得了保证，保证你所获得的那个reference将指向一个历经初始化的对象。更棒的是，如果你从未调用non-local static对象的"仿真函数"，就绝不会引发构造和析构成本；真正的non-local static对象可没这等便宜！

总结：
1、为内置型对象进行手工初始化，因为C++不保证初始化它们。
2、构造函数最好使用成员初值列（member initialization list），而不要在构造函数本体内使用复制操作（assignment）。初值列列出的成员变量，其排列次序应该和它们在class中的声明次序相同。
3、为免除"跨编译单元之初始化次序"问题，请以local static对象替换non-local static对象。

