#define ASPECT_RATIO 1.653
记号名称ASPECT_RATIO从未被编译器看见；也许在编译器开始处理源码之前它就被预处理器移走了。
解决方法是以一个常量替换上述宏（#define）:
const double AspectRatio = 1.653; 
作为一个语言常量，AspectRatio肯定会被编译器看到，
我们以常量替换#define

class专属常量，为了将常量的作用域(scope)限制于class内，你必须让它成为class的一个成员（member）；而为确保此常量至多只有一份实体，你必须让它成为一个static成员：
class GamePlayer
{
private:
 static const int NumTurns = 5;	//constant declaration
 int scores[NumTurns];	 //use of constant
};

定义式如下：
const int GamePlayer::numTurns;    //definition of NumTurns；see below for why no value is given


注意：旧时编译器也许不支持上述语法，它们不允许static
class CostEstimate
{
private:
 static const double FudgeFactor;	//static class常量声明
 ...	 //位于头文件内
};

//defination of static class constant;goes in impl file
const double CostEstimate::FudgeFactor = 1.35;

这几乎是任何时候你唯一需要关心的事，唯一例外是当你在class编译器间需要一个class常量值，例如在上述的
GamePlayer::scores的数组声明式中。这时候万一你的编译器（错误地）不允许"static整数型class常量"完成
"in class初值设定"，可改用所谓的"the enum hack"补偿做法。其理论基础是:"一个属于枚举类型（enumerated type）
的数值可权充int被使用”,于是GamePlayer可定义如下：
class GamePlayer{
private:
 enum {NumTurns = 5};	//"The enum hack"---Makes
 int scores[NumTurns];	//NumTurns a symbolic name for 5
 ...
}
请记住
1、对于单纯常量，最好以const对象或enums替换#defines。
2、对于形似函数的宏（macros）,最好改用inline函数替换#defines。