编译器会为空类（empty class）声明（编译器版本的）一个copy构造函数、一个copy assignment操作符和一个析构函数。此外如果你没有声明任何构造函数，编译器也会为你声明一个default构造函数。所有这些函数都是public且inline.
class Empty{};
这就好像你写下这样的代码：
class Empty
{
public:
 Empty(){...}	 //default构造函数
 Empty(const Empty& rhs){...}	 //copy构造函数
 ~Empty(){...}	 //析构函数
 
 Empty& operator = (const Empty& rhs){...}	//copt assignment操作符
};

惟有当这些函数被需要（被调用），它们才会被编译器创建出来，程序中需要它们是很平常的事。下面代码造成上述
每一个函数被编译器产出：

Empty  e1;    //fefault构造函数
                     //析构函数
Empty e2(e1); //copy构造函数
e2 = e1;          //copy assignment操作符

        default构造函数和析构函数主要是给编译器一个地方用来放置"藏身幕后"的代码，像是调用base classes和non-static成员变量的构造函数和析构函数。注意编译器产出的析构函数是个non-virtual,除非这个class的base class自身声明有virtual析构函数（这种情况下这个函数的虚属性；virtualness；主要来自base class）。
        至于copy构造函数和copy assignment操作符，编译器创建的版本只是单纯地来源对象的每一个non-static成员变量拷贝到目标对象。

template<typename T>
class NamedObject
{
public:
 NamedObject(const char* name,const T& value);
 NamedObject(const std::string& name,const T&value);
 ...
private:
 std::string nameValue;
 T objectValue;
};
        NamedObject既没有声明copy构造函数，也没有copy assignment操作符，所以编译器会为它创建那些函数（如果它们被调用的话）。
现在，看看copy构造函数的用法：
NamedObject<int> no1("Smallest Prime Number",2);
NamedObject<int> no2(no1);                //调用copy构造函数
        编译器为NamedObject<int>所生的copy assignment操作符，其行为基本上与copy构造函数如出一辙，但一般而言只有当生出的代码
合法且有适当机会证明它有意义，如果有一个不符合，编译器会拒绝为class生成operator=。

std::string newDog("Persephone");
std::string oldDog("Satch");
NamedObject<int> p(newDog,2);
NamedObject<int> s(oldDog,36);

p = s;
        赋值之前，不论p.nameValue和s.nameValue都指向string对象（当然不是同一个）。赋值动作该如何影响p.nameValue呢？赋值之后p.nameValue应该指向s.nameValue所指的那个string吗？也就是说reference自身可被改动吗？C++不允许"让reference改指向不同对象"